{"ast":null,"code":"import _regeneratorRuntime from\"E:/NETFLIX BUILD/netflix-build/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/NETFLIX BUILD/netflix-build/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{fetchCount}from'./counterAPI';var initialState={value:0,status:'idle'};// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport var incrementAsync=createAsyncThunk('counter/fetchCount',/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchCount(amount);case 2:response=_context.sent;return _context.abrupt(\"return\",response.data);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());export var counterSlice=createSlice({name:'counter',initialState:initialState,// The `reducers` field lets us define reducers and generate associated actions\nreducers:{increment:function increment(state){// Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n// doesn't actually mutate the state because it uses the Immer library,\n// which detects changes to a \"draft state\" and produces a brand new\n// immutable state based off those changes\nstate.value+=1;},decrement:function decrement(state){state.value-=1;},// Use the PayloadAction type to declare the contents of `action.payload`\nincrementByAmount:function incrementByAmount(state,action){state.value+=action.payload;}},// The `extraReducers` field lets the slice handle actions defined elsewhere,\n// including actions generated by createAsyncThunk or in other slices.\nextraReducers:function extraReducers(builder){builder.addCase(incrementAsync.pending,function(state){state.status='loading';}).addCase(incrementAsync.fulfilled,function(state,action){state.status='idle';state.value+=action.payload;});}});var _counterSlice$actions=counterSlice.actions,increment=_counterSlice$actions.increment,decrement=_counterSlice$actions.decrement,incrementByAmount=_counterSlice$actions.incrementByAmount;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport{increment,decrement,incrementByAmount};export var selectCount=function selectCount(state){return state.counter.value;};// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport var incrementIfOdd=function incrementIfOdd(amount){return function(dispatch,getState){var currentValue=selectCount(getState());if(currentValue%2===1){dispatch(incrementByAmount(amount));}};};export default counterSlice.reducer;","map":{"version":3,"sources":["E:/NETFLIX BUILD/netflix-build/src/features/counter/counterSlice.js"],"names":["createAsyncThunk","createSlice","fetchCount","initialState","value","status","incrementAsync","amount","response","data","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","incrementIfOdd","dispatch","getState","currentValue","reducer"],"mappings":"uSAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA8C,kBAA9C,CACA,OAASC,UAAT,KAA2B,cAA3B,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,CADY,CAEnBC,MAAM,CAAE,MAFW,CAArB,CAKA;AACA;AACA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,cAAc,CAAGN,gBAAgB,CAC5C,oBAD4C,0FAE5C,iBAAOO,MAAP,qJACyBL,CAAAA,UAAU,CAACK,MAAD,CADnC,QACQC,QADR,+CAGSA,QAAQ,CAACC,IAHlB,wDAF4C,+DAAvC,CASP,MAAO,IAAMC,CAAAA,YAAY,CAAGT,WAAW,CAAC,CACtCU,IAAI,CAAE,SADgC,CAEtCR,YAAY,CAAZA,YAFsC,CAGtC;AACAS,QAAQ,CAAE,CACRC,SAAS,CAAE,mBAACC,KAAD,CAAW,CACpB;AACA;AACA;AACA;AACAA,KAAK,CAACV,KAAN,EAAe,CAAf,CACD,CAPO,CAQRW,SAAS,CAAE,mBAACD,KAAD,CAAW,CACpBA,KAAK,CAACV,KAAN,EAAe,CAAf,CACD,CAVO,CAWR;AACAY,iBAAiB,CAAE,2BAACF,KAAD,CAAQG,MAAR,CAAmB,CACpCH,KAAK,CAACV,KAAN,EAAea,MAAM,CAACC,OAAtB,CACD,CAdO,CAJ4B,CAoBtC;AACA;AACAC,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1BA,OAAO,CACJC,OADH,CACWf,cAAc,CAACgB,OAD1B,CACmC,SAACR,KAAD,CAAW,CAC1CA,KAAK,CAACT,MAAN,CAAe,SAAf,CACD,CAHH,EAIGgB,OAJH,CAIWf,cAAc,CAACiB,SAJ1B,CAIqC,SAACT,KAAD,CAAQG,MAAR,CAAmB,CACpDH,KAAK,CAACT,MAAN,CAAe,MAAf,CACAS,KAAK,CAACV,KAAN,EAAea,MAAM,CAACC,OAAtB,CACD,CAPH,EAQD,CA/BqC,CAAD,CAAhC,CAkCA,0BAAoDR,YAAY,CAACc,OAAjE,CAAQX,SAAR,uBAAQA,SAAR,CAAmBE,SAAnB,uBAAmBA,SAAnB,CAA8BC,iBAA9B,uBAA8BA,iBAA9B,CAEP;AACA;AACA;8CACA,MAAO,IAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACX,KAAD,QAAWA,CAAAA,KAAK,CAACY,OAAN,CAActB,KAAzB,EAApB,CAEP;AACA;AACA,MAAO,IAAMuB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACpB,MAAD,QAAY,UAACqB,QAAD,CAAWC,QAAX,CAAwB,CAChE,GAAMC,CAAAA,YAAY,CAAGL,WAAW,CAACI,QAAQ,EAAT,CAAhC,CACA,GAAIC,YAAY,CAAG,CAAf,GAAqB,CAAzB,CAA4B,CAC1BF,QAAQ,CAACZ,iBAAiB,CAACT,MAAD,CAAlB,CAAR,CACD,CACF,CAL6B,EAAvB,CAOP,cAAeG,CAAAA,YAAY,CAACqB,OAA5B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}